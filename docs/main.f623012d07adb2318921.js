!function(e){function n(n){for(var r,s,i=n[0],u=n[1],c=n[2],d=0,m=[];d<i.length;d++)s=i[d],Object.prototype.hasOwnProperty.call(o,s)&&o[s]&&m.push(o[s][0]),o[s]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(n);m.length;)m.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var e,n=0;n<a.length;n++){for(var t=a[n],r=!0,i=1;i<t.length;i++){var u=t[i];0!==o[u]&&(r=!1)}r&&(a.splice(n--,1),e=s(s.s=t[0]))}return e}var r={},o={0:0},a=[];function s(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=e,s.c=r,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)s.d(t,r,function(n){return e[n]}.bind(null,r));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="";var i=window.webpackJsonp=window.webpackJsonp||[],u=i.push.bind(i);i.push=n,i=i.slice();for(var c=0;c<i.length;c++)n(i[c]);var l=u;a.push(["tjUo",1]),t()}({"Wb3+":function(e,n,t){"use strict";t.r(n),n.default=t.p+"8a38237adaa8dcf738832da460e9a972.svg"},kMZY:function(e,n,t){var r=t("LboF"),o=t("rXkF");"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},rXkF:function(e,n,t){var r=t("JPst"),o=t("HeW1"),a=t("Wb3+");n=r(!1);var s=o(a);n.push([e.i,".clock {\n    border-radius: 50%;\n    background: #fff url("+s+') no-repeat center;\n    background-size: 88%;\n    height: 0;\n    padding-bottom: 31%;\n    position: relative;\n    width: 31%;\n    margin: auto;\n}\n\n.clock.simple:after {\n    background: #000;\n    border-radius: 50%;\n    content: "";\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 5%;\n    height: 5%;\n    z-index: 10;\n}\n\n#hours-hand {\n    background: #000;\n    height: 20%;\n    left: 48.75%;\n    position: absolute;\n    top: 30%;\n    transform-origin: 50% 100%;\n    width: 2.5%;\n}\n\n#minutes-hand {\n    background: #000;\n    height: 40%;\n    left: 49%;\n    position: absolute;\n    top: 10%;\n    transform-origin: 50% 100%;\n    width: 2%;\n}\n\n#seconds-hand {\n    background: #000;\n    height: 45%;\n    left: 49.5%;\n    position: absolute;\n    top: 14%;\n    transform-origin: 50% 80%;\n    width: 1%;\n    z-index: 8;\n}\n\n\n',""]),e.exports=n},tjUo:function(e,n,t){"use strict";t.r(n);var r=t("q1tI"),o=t.n(r),a=t("i8i4"),s=function(e){return Math.floor(Math.random()*e)+1},i=s(12),u=s(59),c=s(59),l=function(){return{hours:i,minutes:u,seconds:c}};console.log({time:l()});t("kMZY");function d(e){return document.querySelector(e).getAttribute("data-rotation")}var m,f,h=function(e){return"rotateZ(".concat(e,"deg)")},p=function(e,n){return document.getElementById(e).style.transform=h(n)},g=function(e){var n=e.hours,t=e.minutes,r=e.seconds,a=e.showRow,s=function(e){var n=e.hours,t=e.minutes;return{hours:30*n+t/2,minutes:6*t,seconds:6*e.seconds}}({hours:n,minutes:t,seconds:r});return o.a.useLayoutEffect((function(){var e=d("#hours"),o=d("#minutes"),a=d("#seconds");console.log("checking if should force render to update dom on hydration"),e!==s.hours&&o!==s.minutes&&a!==s.seconds&&(console.log({hours:n,minutes:t,seconds:r,hands:s},"forcing render"),p("hours-hand",s.hours),p("minutes-hand",s.minutes),p("seconds-hand",s.seconds))}),[]),o.a.createElement("div",{id:"question-row",className:"row",style:{display:a}},o.a.createElement("div",{className:"clock"},o.a.createElement("div",{className:"hours-container"},o.a.createElement("div",{id:"hours-hand","data-rotation":s.hours,style:{transform:h(s.hours)}})),o.a.createElement("div",{className:"minutes-container"},o.a.createElement("div",{id:"minutes-hand","data-rotation":s.minutes,style:{transform:h(s.minutes)}})),o.a.createElement("div",{className:"seconds-container"},o.a.createElement("div",{id:"seconds-hand","data-rotation":s.seconds,style:{transform:h(s.seconds)}}))))},y=function(e){return parseInt(document.querySelector(e).value,10)},v=function(e){var n=e.answer,t=e.answerIsCorrect,r=e.handleChange,a=e.showRow;o.a.useLayoutEffect((function(){document.querySelector("#answer-row input#hours").focus()}),[]);var s=function(e){var n=y("#hours"),t=y("#minutes"),o=y("#seconds");console.log({h:n,m:t,s:o},"handling?"),r({hours:n,minutes:t,seconds:o})};return o.a.createElement("div",{id:"answer-row",className:"row",style:{display:a}},"The time is:",o.a.createElement("input",{type:"number",max:"12",min:"0",step:"1",id:"hours",value:n.hours,onChange:s})," : ",o.a.createElement("input",{type:"number",max:"59",min:"0",step:"1",id:"minutes",value:n.minutes,onChange:s})," : ",o.a.createElement("input",{type:"number",max:"59",min:"0",step:"1",id:"seconds",value:n.seconds,onChange:s}),o.a.createElement("div",{className:"mark-holder"},o.a.createElement("span",{className:"cross",style:{display:null==t||t?"none":""}},"✘")))},b="https://api.thecatapi.com/api/images/get?format=src&type=gif",w=function(){f=new Promise((function(e,n){b+="&cacheBuster="+(new Date).getTime();var t=document.createElement("img");t.onload=function(){console.log(b,"preloaded!"),m=t,e()},t.onerror=function(e){n(e)},t.src=b}))},E=function(e){var n=e.question;return o.a.useLayoutEffect((function(){var e;e=document.getElementById("cat-gif"),f||w(),f.then((function(){e.innerHTML="",e.appendChild(m)})).then((function(){f=null,w()}))}),[n]),o.a.createElement("div",{id:"cat-gif",className:"done-row"},"Loading...")},k=function(e){var n=e.question,t=e.shouldDisplay,r=e.resetPage;return o.a.createElement("div",{id:"done",className:"row",style:{display:t}},o.a.createElement("div",{className:"result done-row"},"Yes! The time was ",n.hours,":",n.minutes,":",n.seconds),o.a.createElement("div",{className:"done-row"},o.a.createElement("button",{onClick:r},"Awesome, Again?")),o.a.createElement(E,{question:n}))};function S(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var t=[],r=!0,o=!1,a=void 0;try{for(var s,i=e[Symbol.iterator]();!(r=(s=i.next()).done)&&(t.push(s.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==i.return||i.return()}finally{if(o)throw a}}return t}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return j(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return j(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var O=function(){var e=S(o.a.useState({hours:"",minutes:"",seconds:""}),2),n=e[0],t=e[1],r=S(o.a.useState(null),2),a=r[0],d=r[1],m=S(o.a.useState(l()),2),f=m[0],h=m[1],p=function(){return null!=a&&a?"none":""};return o.a.createElement("div",null,o.a.createElement(g,{hours:f.hours,minutes:f.minutes,seconds:f.seconds,showRow:p()}),o.a.createElement(v,{answer:n,answerIsCorrect:a,showRow:p(),handleChange:function(e){var n,r;t(e),d((r=(n=e).hours===i&&n.minutes===u&&n.seconds===c,console.log({checking:n,correct:l(),allMatch:r}),r))}}),o.a.createElement(k,{question:f,shouldDisplay:null!=a&&a?"":"none",resetPage:function(){var e=(i=s(12),u=s(59),c=s(59),l());h(e),t({hours:"",minutes:"",seconds:""}),d(null)}}))};Object(a.hydrate)(o.a.createElement(O,null),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,